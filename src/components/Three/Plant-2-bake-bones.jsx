/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 C:\Users\billy\Documents\GitHub\billy-berkouwer-dev-site\public\plant-2-bake-bones.gltf 
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useHelper } from '@react-three/drei'
import { SkinnedMesh, SkeletonHelper } from "three"
import { useThree } from '@react-three/fiber';

export default function Plant(props) {
  const gltf = useGLTF('/plant-2-bake-bones.gltf');
  const petals = useRef();
  const [skinnedMeshHelpers, setSkinnedMeshHelpers] = useState([]);
  const { scene } = useThree();
  const SkinnedMeshHelper = useHelper({current: skinnedMeshHelpers[4]}, SkeletonHelper, 1, 'green')

  useEffect(() => {
    if (petals.current) {
      gltf.scene.matrixWorldNeedsUpdate = true;
      const bones = [];
      const meshesGeometry = [];
      const meshesMaterial = [];
      gltf.scene.traverse((object) => object?.userData?.name?.includes('Bone') ? bones.push(object) : null);
      petals.current.traverse((object) => object?.geometry ? meshesGeometry.push(object.geometry) && meshesMaterial.push(object.material) : null)
      console.log(bones)
      // console.log(petals.current)
      // const meshWithArmature = new SkinnedMesh(geometry, material);
      const skinnedMeshes = meshesGeometry.map((geometry, i) => new SkinnedMesh(geometry, meshesMaterial[i]))
      const skinnedMeshHelpers = skinnedMeshes.map((mesh) => new SkeletonHelper(mesh))
      skinnedMeshes.forEach((mesh) => gltf.scene.add(mesh))
      skinnedMeshHelpers.forEach((helper) => gltf.scene.add(helper));
      console.log(skinnedMeshHelpers[0])
      setSkinnedMeshHelpers(skinnedMeshHelpers);
    }

    console.log(gltf.scene)
  }, [gltf, scene])

  return (
    <group {...props} dispose={null} position={[0, -10, 0]}>
      <group position={[0, 15.325, 1.454]}>
        <group position={[0.605, -0.261, 1.236]} rotation={[0.833, -0.014, 0]}>
          {/* <mesh geometry={gltf.nodes.Cube003.geometry} material={gltf.materials['petals-5']} />
          <mesh geometry={gltf.nodes.Cube003_1.geometry} material={gltf.materials['petals-6']} />
          <mesh geometry={gltf.nodes.Cube003_2.geometry} material={gltf.materials['petals-3']} />
          <mesh geometry={gltf.nodes.Cube003_3.geometry} material={gltf.materials['Material.002']} /> */}
          <mesh ref={el => el ? petals.current = el : null}  geometry={gltf.nodes.Cube003_4.geometry} material={gltf.materials['petals-2']} />
          {/* <mesh geometry={gltf.nodes.Cube003_5.geometry} material={gltf.materials['petals-1']} />
          <mesh geometry={gltf.nodes.Cube003_6.geometry} material={gltf.materials['petals-4']} /> */}
        </group>
      </group>
      {/* <mesh geometry={gltf.nodes['nucleus-optimised'].geometry} material={gltf.materials.Material} position={[0.035, 14.436, 0.687]} rotation={[0.756, 0.021, 0.022]} scale={0.487} />
      <mesh geometry={gltf.nodes.stem.geometry} material={gltf.materials.stem} position={[0, 15.483, 1.604]} rotation={[0.833, 0, 0]} />
      <mesh geometry={gltf.nodes.leaf.geometry} material={gltf.materials.leaf} position={[-0.893, 13.526, 1.024]} rotation={[1.368, -0.858, 1.223]} />
      {skinnedMeshHelpers.map((mesh) => {
        <primitive object={mesh} />
      })} */}
    </group>
  )
}

useGLTF.preload('/plant-2-bake-bones.gltf')
